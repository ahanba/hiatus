#coding: utf-8

module Reader
  module Core
    @@bilingualArray = []
    #
    #each bilingual data contains following keys
    # :filename = all
    # :source   = all
    # :target   = all
    # :id       = XLZ and CSV, TXT (Line number)
    # :note     = XLZ and TTX (Match % info)
    # :file     = XLZ only (Asset file info in Idiom)
    #
    #[:note] key is used for filtering
    
    @@glossaryArray = []
    #
    #each glossary data contains following keys
    # :source
    # :target
    # :option
    # :file
    #An instance of Glossary class will be generated by this array
    #It then generates instances of Glossary::Term class and keep them in Array
    
    @@monolingualArray = []
    #
    #each monolingual data contains following keys
    # :s_or_t
    # :term
    # :option
    #An instance of Monolingual class will be generated by this array
    #It then generates instances of Monolingual::Term class and keep them in Array
    
    #ROWSEP = "\r\n"
    #ROWSEP = ENV["OS"] ? "\r\n" : $/
    
    #Read file and return it in UTF-8 format
    def read_rawfile(file)
      fl = File.open(file, "rb")
      str = fl.read; fl.close
      
      #p guess_encode(str)
      begin
        case guess_encode(str)
        when "UTF-8"
          str = NKF.nkf('-wWxm0', str)
        when "UTF-16"
          str = NKF.nkf('-wW16xm0', str)
        when "ASCII"
          str = str.encode("UTF-8", Encoding::ASCII)
        when "SHIFT_JIS"
          str = NKF.nkf('-wSxm0', str)
        when "JIS"
          str = NKF.nkf('-wJxm0', str)
        when "GB2312"
          str = str.encode("UTF-8", "GBK")
        when "BIG5"
          str = str.encode("UTF-8", "BIG5")
        when "EUC-JP"
          str = NKF.nkf('-wExm0', str)
        when "EUC-KR"
          str = str.encode("UTF-8", Encoding::EUC_KR)
        when "EUC-TW"
          str = str.encode("UTF-8", Encoding::EUC_TW)
        when "ISO-2022-JP"
          str = str.encode("UTF-8", Encoding::ISO2022_JP)
        when "MACCYRILLIC"
          str = str.encode("UTF-8", Encoding::MacCyrillic)
        when "IBM855"
          str = str.encode("UTF-8", Encoding::IBM855)
        when "IBM866"
          str = str.encode("UTF-8", Encoding::IBM866)
        when "ISO-8859-5"
          str = str.encode("UTF-8", Encoding::ISO_8859_5)
        when "ISO-8859-2"
          str = str.encode("UTF-8", Encoding::ISO_8859_2)
        when "ISO-8859-7"
          str = str.encode("UTF-8", Encoding::ISO_8859_7)
        when "ISO-8859-8"
          str = str.encode("UTF-8", Encoding::ISO_8859_8)
        when "TIS-620"
          str = str.encode("UTF-8", Encoding::TIS620)
        else
          str = str.encode("UTF-8")
        end
        return str
      rescue
        puts "Failed to read #{File.basename(file)}. Please check the encoding and try again.\nEncoding: #{guess_encode(str)}"
        p $!
        exit
      ensure
        fl = nil
      end
    end
    
    #Guess file encode
    def guess_encode(str)
      if NKF.guess(str).dummy?
        encode = "UTF-16"
      elsif NKF.guess(str) == NKF::UTF8
        encode = "UTF-8"
      elsif NKF.guess(str) == NKF::JIS
        encode = "JIS"
      else
        encode = UniversalDetector::chardet(str)["encoding"].to_s.upcase
      end
    end
    
  end
end

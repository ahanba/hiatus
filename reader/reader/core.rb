#coding: utf-8

module Reader
  module Core
    @@bilingualArray = []
    #
    #each bilingual data contains following keys
    # :filename = all
    # :source   = all
    # :target   = all
    # :id       = XLZ and CSV, TXT (Line number)
    # :note     = XLZ and TTX (Match % info)
    # :file     = XLZ only (Asset file info in Idiom)
    #
    #[:note] key is used for filtering
    
    @@glossaryArray = []
    #
    #each glossary data contains following keys
    # :source
    # :target
    # :option
    # :file
    #An instance of Glossary class will be generated by this array
    #It then generates instances of Glossary::Term class and keep them in Array
    
    @@monolingualArray = []
    #
    #each monolingual data contains following keys
    # :s_or_t
    # :term
    # :option
    #An instance of Monolingual class will be generated by this array
    #It then generates instances of Monolingual::Term class and keep them in Array
    
    #ROWSEP = "\r\n"
    #ROWSEP = ENV["OS"] ? "\r\n" : $/
    
    #Read file and return it in UTF8 format
    def read_rawfile(file)
      fl = File.open(file, "rb")
      file_str = fl.read; fl.close
      #file_str = Kconv.kconv(file_str, Kconv::UTF8, guess_encode(file_str))
      file_str = NKF.nkf('-wx', file_str)
      #file_str = file_str.delete("\xEF\xBB\xBF")
    end
    
    #Guess file encode
    #def guess_encode(str)
      #encode = NKF.guess(str)
      
      #Assume all dummy encodes as UTF16
      #dummies can be UTF_16, UTF_7 & UTF_32. UTF_7 & UTF_32 are ignored as they are hardly used
      #UTF16 dummy is UTF16 with BOM
      
      #encode = NKF::UTF16 if encode.dummy?
      #codes = {
      #       NKF::UTF8    => Kconv::UTF8,
      #       NKF::UTF16   => Kconv::UTF16,
      #       NKF::SJIS    => Kconv::SJIS,
      #       NKF::JIS     => Kconv::JIS,
      #       NKF::EUC     => Kconv::EUC,
      #       NKF::ASCII   => Kconv::ASCII,
      #       NKF::BINARY  => Kconv::BINARY,
      #       NKF::UNKNOWN => Kconv::UNKNOWN
      #}
      #return codes[encode]
    #end
    
    def read_rawText(str)
      #Kconv.kconv(str, Kconv::UTF8, guess_encode(str))
      NKF.nkf('-wx', str)
    end
  end
end
